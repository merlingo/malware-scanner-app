#pragma once
#ifndef MATRIX_H_
#define MATRIX_H_
using namespace std;
template<typename T>
class Matrix
{
	T **inner_;
	size_t  dimx_, dimy_;
public:
	Matrix() :dimx_(0), dimy_(0) {

	}
	Matrix(size_t dimx, size_t dimy) : dimx_(dimx), dimy_(dimy)
	{
		inner_ = new T*[dimx];
		for (auto i = 0; i < dimx; ++i)
			inner_[i] = new T[dimy];

	}
	class Row {
		friend class Matrix;
		Matrix<T>& parent;
		int row;
		Row(Matrix<T> &parent_, int row_) : parent(parent_), row(row_) {
		}
	public:
		 int& operator[](unsigned int y) {
			return parent.inner_[row][y];
		}
	};
	 Row operator[](unsigned int x) {
		return Row(*this, x);
	}
	~Matrix<T>() {
		//TODO:icindekiler de silinmeli
		delete[] inner_;
	}
};
#endif
