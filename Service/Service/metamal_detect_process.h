#pragma once
#ifndef METAMAL_PROCESS_H
#define METAMAL_PROCESS_H
#include<string>
#include <list>
#include<vector>
#include"Configuration.h"
#include "Model.h"
#include"Process.h"
#define ZYCORE_STATIC_DEFINE
#define ZYDIS_STATIC_DEFINE
//#define WINVER = 0x0502;
#pragma comment(lib, "Zycore.lib")
#pragma comment(lib, "Zydis.lib")
#include <stdio.h>
#include <inttypes.h>
#include <Zydis/Zydis.h>
#include <iostream>
#include <fstream>
#include<string>
#include <windows.h>
#include <queue>          // std::queue
#include <limits>
using namespace std;
#define BUFFSIZE 1000

class MetamalDetectProcess : public Process
{
	vector<string> allOpCodes;
public:
	MetamalDetectProcess();
	bool step(File& filename) override; //override - detection of metamorphic malware step
	int allOpcodesBuilding( string opcode);
	Family getFamily(const string& fn);
	Opcode_seq get_op(const string& fn, vector<string> &allOpCodes);
	void resize(int size, int* &arr); // when allOpcode size is changed, then resize the array of GraphModel vector.
	bool contain(string s1, string s2);
	~MetamalDetectProcess();
};
#endif
