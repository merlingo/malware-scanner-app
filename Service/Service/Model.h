#pragma once
#ifndef MODEL_H_
#define MODEL_H_

#include "Matrix.h"
#include <vector>
#include <list>
#include "Configuration.h"
#include "GraphModel.h"
#include<iostream>
#include<fstream>
using namespace std;

vector<string> split(string s, string delimiter);
class Model
{
	vector<GraphModel> ms;// for each family, there is a model graph
	int space_size;
	double mean(Matrix<int> data);
	double cov(Matrix<int> a, Matrix<int> b, double meana, double meanb);
	double var(Matrix<int> data, double meandata);
	double correlation_coefficient(Matrix<int> a, Matrix<int> b);
	int largest(double arr[], int n);
	Matrix<int> opseq_to_Matrix(Opcode_seq sample) {

		Matrix<int> m(space_size, space_size);
		sample.change_to_unique();
		list<Opcode>::iterator i;
		for (int i = 0; i < space_size; i++) {
			for (int j = 0; j < space_size; j++)
				m[i][j] = 0;
		}
		for (i = sample.sequence.begin(); i != (sample.sequence.end()); i++) {
			list<Opcode>::iterator j;
			for (j = i; j != sample.sequence.end(); j++) {
				m[(*i).order][(*j).order] = 1;
				m[(*j).order][(*i).order] = 1;
			}
		}
		return m;
	}
public:
	Model();
	Model(int ss);
	inline void pushGraphModel(GraphModel gm, int ind) {
		ms[ind] = gm;
	}
	void train(vector<Opcode_seq> &dataset);
	void trainWitOne(Opcode_seq &sample);
	Family test(Opcode_seq sample, double* &results);
	void exportModel(string filename);
	static Model importModel(string filename);
	~Model();
};

vector<string> split(string s, string delimiter);
#endif