#pragma once
#ifndef MALWARE_FINDER_SERVICE_H_
#define MALWARE_FINDER_SERVICE_H_
#include <iostream>
#include <Windows.h>
#include "httpRequest.h"
#include <fstream>
#include "Scanner.h"
#include "service_base.h"


class MalwareFinderService : public ServiceBase {
public:
	MalwareFinderService(const MalwareFinderService& other) = delete;
	MalwareFinderService& operator=(const MalwareFinderService& other) = delete;

	MalwareFinderService(MalwareFinderService&& other) = delete;
	MalwareFinderService& operator=(MalwareFinderService&& other) = delete;

	MalwareFinderService()
		: ServiceBase(_T("MALWARESERVICE"),
			_T("MALWARESERVICE"),
			SERVICE_DEMAND_START,
			SERVICE_ERROR_NORMAL,
			SERVICE_ACCEPT_STOP | SERVICE_ACCEPT_SESSIONCHANGE) {}
private:
	void OnStart(DWORD argc, TCHAR* argv[]) override;
	void OnStop() override;
	void OnSessionChange(DWORD evtType,
		WTSSESSION_NOTIFICATION* notification) override;

#ifdef UNICODE
	using tofstream = std::wofstream;
#else
	using tofstream = std::ofstream;
#endif

	tofstream m_logFile;
	Scanner s;
};

#endif // USER_TRACKER_SERVICE_H_
