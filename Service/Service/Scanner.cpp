#include "Scanner.h"


void Scanner::scan(const string dir_name, vector<File>& v, vector<Process*> ps)
{
	WIN32_FIND_DATA data;
	HANDLE hFind;
	queue<string> mfileq;
	mfileq.push(dir_name);
	while (!mfileq.empty()) {

		std::string pattern(mfileq.front());
		mfileq.pop();
		pattern.append("\\*.*");
		if ((hFind = FindFirstFile(pattern.c_str(), &data)) != INVALID_HANDLE_VALUE) {
			do {
				if (strcmp(data.cFileName, ".") == 0 || strcmp(data.cFileName, "..") == 0)
					continue;
				string vc = dir_name + "\\" + data.cFileName;
				if ((GetFileAttributes(vc.c_str()) == FILE_ATTRIBUTE_DIRECTORY)) {
					mfileq.push(vc);
				}
				else {
					//(*proc)(vc);
					File f(vc);
					for (int i = 0; i < ps.size(); i++) {
						bool found=ps[i]->step(f);
						if (found) {
							break;
						}							
					}
					v.push_back(f);
				}

			} while (FindNextFile(hFind, &data) != 0);
			FindClose(hFind);
		}
	}
}

void Scanner::scan() {
	//1- create thread, if pause condition is true pause thread, if stop condition is true stop thread and write vector file into reportfile
	WIN32_FIND_DATA data;
	HANDLE hFind;
	directories.push(dir_name);
	while (!directories.empty()) {
		if (*pause_cond == true) {
			while ((*pause_cond))
				Sleep(120);
		}
		std::string pattern(directories.front());
		directories.pop();
		pattern.append("\\*.*");
		if ((hFind = FindFirstFile(pattern.c_str(), &data)) != INVALID_HANDLE_VALUE) {
			do {
				if (strcmp(data.cFileName, ".") == 0 || strcmp(data.cFileName, "..") == 0)
					continue;
				string vc = dir_name + "\\" + data.cFileName;
				if ((GetFileAttributes(vc.c_str()) == FILE_ATTRIBUTE_DIRECTORY)) {
					directories.push(vc);
				}
				else {
					//(*proc)(vc);
					File f(vc);
					for (int i = 0; i < whats_with_scanned_file.size(); i++) {
						bool found = whats_with_scanned_file[i]->step(f);
						if (found) {
							break;
						}
					}
					v.push_back(f);
				}

			} while (FindNextFile(hFind, &data) != 0);
			FindClose(hFind);
		}
	}
}
Scanner::Scanner()
{

}
