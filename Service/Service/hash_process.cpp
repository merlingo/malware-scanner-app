#include "hash_process.h"



bool HashProcess::CheckWord(string filename, string search)
{
	int offset;
	string line;
	ifstream Myfile;
	Myfile.open(filename);
	if (Myfile.is_open())
	{
		while (!Myfile.eof())
		{
			getline(Myfile, line);
			if (line.find(search, 0) != string::npos)
			{
				//cout << "found '" << search << " \n\n" << line << endl;
				return true;
			}
			else
			{
				cout << "Not found \n\n";
			}
		}
		Myfile.close();
	}
	else
		cout << "Unable to open this file." << endl;

	return false;
}


string HashProcess::MD5Hash(string fn) {

	DWORD dwStatus = 0;
	BOOL bResult = FALSE;
	HCRYPTPROV hProv = 0;
	HCRYPTHASH hHash = 0;
	HANDLE hFile = NULL;
	BYTE rgbFile[BUFSIZE];
	DWORD cbRead = 0;
	BYTE rgbHash[MD5LEN];
	DWORD cbHash = 0;
	CHAR rgbDigits[] = "0123456789abcdef";
	LPCSTR filename = fn.c_str();
	// Logic to check usage goes here.

	hFile = CreateFile(filename,
		GENERIC_READ,
		FILE_SHARE_READ,
		NULL,
		OPEN_EXISTING,
		FILE_FLAG_SEQUENTIAL_SCAN,
		NULL);

	if (INVALID_HANDLE_VALUE == hFile)
	{
		dwStatus = GetLastError();
		printf("Error opening file %s\nError: %d\n", filename,
			dwStatus);
		return "";
	}

	// Get handle to the crypto provider
	if (!CryptAcquireContext(&hProv,
		NULL,
		NULL,
		PROV_RSA_FULL,
		CRYPT_VERIFYCONTEXT))
	{
		dwStatus = GetLastError();
		printf("CryptAcquireContext failed: %d\n", dwStatus);
		CloseHandle(hFile);
		return "";
	}

	if (!CryptCreateHash(hProv, CALG_MD5, 0, 0, &hHash))
	{
		dwStatus = GetLastError();
		printf("CryptAcquireContext failed: %d\n", dwStatus);
		CloseHandle(hFile);
		CryptReleaseContext(hProv, 0);
		return "";
	}

	while (bResult = ReadFile(hFile, rgbFile, BUFSIZE,
		&cbRead, NULL))
	{
		if (0 == cbRead)
		{
			break;
		}

		if (!CryptHashData(hHash, rgbFile, cbRead, 0))
		{
			dwStatus = GetLastError();
			printf("CryptHashData failed: %d\n", dwStatus);
			CryptReleaseContext(hProv, 0);
			CryptDestroyHash(hHash);
			CloseHandle(hFile);
			return "";
		}
	}

	if (!bResult)
	{
		dwStatus = GetLastError();
		printf("ReadFile failed: %d\n", dwStatus);
		CryptReleaseContext(hProv, 0);
		CryptDestroyHash(hHash);
		CloseHandle(hFile);
		return "";
	}

	cbHash = MD5LEN;
	std::ostringstream oss;

	if (CryptGetHashParam(hHash, HP_HASHVAL, rgbHash, &cbHash, 0))
	{
		printf("MD5 hash of file %s is: ", filename);
		for (DWORD i = 0; i < cbHash; i++)
		{
			oss << rgbDigits[rgbHash[i] >> 4] << rgbDigits[rgbHash[i] & 0xf];
		}
		printf("\n");
	}
	else
	{
		dwStatus = GetLastError();
		printf("CryptGetHashParam failed: %d\n", dwStatus);
	}
	CryptDestroyHash(hHash);
	CryptReleaseContext(hProv, 0);
	CloseHandle(hFile);

	return oss.str();
}

char * HashProcess::getbyte(const string& fn, size_t &length) {
	ifstream infile(fn);

	//get length of file
	infile.seekg(0, infile.end);
	length = infile.tellg();
	infile.seekg(0, infile.beg);
	char* buffer = new char[length];
	infile.read(buffer, length);
	return buffer;
}

HashProcess::HashProcess()
{
}


HashProcess::~HashProcess()
{
}

bool HashProcess::step(File & filename)
{
	bool isdetected = CheckWord(hashfilename, filename.name);
	if (isdetected)
		filename.ft = SIGNED;
	else
		filename.ft = BENIGN;
	return isdetected;
}
